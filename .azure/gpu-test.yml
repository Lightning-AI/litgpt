name: GPU tests

trigger:
  branches:
    include:
      - "main"
      - "wip"

pr:
  branches:
    include:
      - "main"
      - "wip"

jobs:
  - job: testing
    strategy:
      matrix:
        "ordinary":
          #image: "pytorchlightning/pytorch_lightning:base-cuda-py3.10-torch2.7-cuda12.6.3"
          dependency: ""
        "w. Thunder":
          #image: "pytorchlightning/pytorch_lightning:base-cuda-py3.10-torch2.7-cuda12.6.3"
          dependency: "compiler"
    variables:
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )
      PL_RUN_CUDA_TESTS: "1"
      TRANSFORMERS_CACHE: "/var/tmp/hf/transformers"
      HF_HOME: "/var/tmp/hf/home"
      HF_HUB_CACHE: "/var/tmp/hf/hub"
      CI: "true"
      NCCL_DEBUG: "INFO"
      PYTHON_VERSION: "3.10"
      CUDA_VERSION: "12.6.3"
      TORCH_VERSION: "2.7.1"
      CUDNN_FRONTEND_VERSION: "1.10.0"
    container:
      # image: "pytorchlightning/pytorch_lightning:base-cuda-py$(PYTHON_VERSION)-torch$(TORCH_VERSION)-cuda$(CUDA_VERSION)"
      # pytorchlightning/lightning-thunder:ubuntu22.04-cuda12.1.1-cudnn-fe1.5.0-py3.10-pt_main-dev
      image: "pytorchlightning/lightning-thunder:ubuntu24.04-cuda$(CUDA_VERSION)-cudnn-fe$(CUDNN_FRONTEND_VERSION)-py$(PYTHON_VERSION)-pt_$(TORCH_VERSION)-dev"
      options: "--gpus=all --shm-size=8gb -v /var/tmp:/var/tmp"
    workspace:
      clean: all
    pool: "lit-rtx-3090"
    timeoutInMinutes: "35"
    cancelTimeoutInMinutes: "2"
    steps:
      - bash: |
          echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
        displayName: "set env. vars"

      - bash: |
          echo $(DEVICES)
          echo $CUDA_VISIBLE_DEVICES
          dpkg-query -W -f='${Package} ${Version}\n' libnccl2 libnccl-dev
          whereis nvidia
          nvidia-smi
          which python && which pip
          python --version
          pip --version
          pip list
        displayName: "Image info & NVIDIA"

      - script: |
          pip install --upgrade pip
          pip install '.[extra,test]' "torch==${TORCH_VERSION}" cffi -U
        displayName: "Install package & dependencies"

      - script: |
          set -e
          pip uninstall -y torchvision torchaudio
          pip install '.[compiler,extra,test]' "torch==${TORCH_VERSION}"
          python -c "from thunder.executors import nvfuser_available ; assert nvfuser_available(), 'nvFuser is missing!'"
          python -c "from thunder.executors.triton_utils import triton_version ; assert triton_version() is not None, 'triton is missing!'"
        condition: eq(variables['dependency'], 'compiler')
        displayName: "Install `compiler` [nvFuser & Thunder]"

      - bash: |
          set -e
          pip list
          python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu == 2, f'GPU: {mgpu}'"
          python -c "from torch import __version__ as ver ; assert str(ver).split('+')[0] == '$(TORCH_VERSION)', f'PyTorch: installed {ver} but expected $(TORCH_VERSION)'"
        displayName: "Env details"

      - bash: pytest -v
        displayName: "All tests"
        timeoutInMinutes: "15"

      - bash: |
          wget https://raw.githubusercontent.com/Lightning-AI/utilities/main/scripts/run_standalone_tests.sh
          bash run_standalone_tests.sh "tests"
        displayName: "Standalone tests"
        env:
          PL_RUN_STANDALONE_TESTS: "1"
          # NUM_PARALLEL_TESTS: "10"
          NCCL_IGNORE_DISABLED_P2P: "1"
          NCCL_DEBUG: "INFO"
        timeoutInMinutes: "10"

      - bash: |
          pip uninstall -y lightning-thunder
          # install thunder from source, so that, thunder.tests will be available
          pip install -U "lightning-thunder[test] @ git+https://github.com/Lightning-AI/lightning-thunder.git" "torch==${TORCH_VERSION}"
        displayName: "Re-install Thunder [main branch]"
        condition: eq(variables['dependency'], 'compiler')

      - bash: |
          # without env var, it filters out all tests
          PL_RUN_CUDA_TESTS=0 pytest tests/ext_thunder/test_thunder_networks.py -v
        displayName: "Extra tests for Thunder [main branch]"
        condition: eq(variables['dependency'], 'compiler')
        env:
          TORCHDYNAMO_VERBOSE: "1"
        timeoutInMinutes: "10"
